/**
 * 
 */
package etc;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;

/**
 * @author ginTonic
 * @Title 톱니바퀴
 * 2018. 3. 25.
 */
public class No14891 {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		Deque<Integer> dq1 = new LinkedList<Integer>();
		Deque<Integer> dq2 = new LinkedList<Integer>();
		Deque<Integer> dq3 = new LinkedList<Integer>();
		Deque<Integer> dq4 = new LinkedList<Integer>();
		
		//초기화
		String str = br.readLine();
		for(int j=0;j<str.length();j++)
			dq1.addLast(str.charAt(j)-'0');
		str = br.readLine();
		for(int j=0;j<str.length();j++)
			dq2.addLast(str.charAt(j)-'0');
		str = br.readLine();
		for(int j=0;j<str.length();j++)
			dq3.addLast(str.charAt(j)-'0');
		str = br.readLine();
		for(int j=0;j<str.length();j++)
			dq4.addLast(str.charAt(j)-'0');
		
		int k = Integer.valueOf(br.readLine());
		while(k-->0) {
			String[] a = br.readLine().split(" ");
			//m - 몇번쨰바퀴, n - 무슨방향(1:시계방향, -1:반시계방향)
			int m = Integer.valueOf(a[0]);
			int n = Integer.valueOf(a[1]);
			
			forward(dq1, dq2, dq3, dq4, m, n);
		}
		
	}

	/**
	 * @param dq1
	 * @param dq2
	 * @param dq3
	 * @param dq4
	 * @param m
	 * @param n
	 */
	private static void forward(Deque<Integer> dq1, Deque<Integer> dq2, Deque<Integer> dq3, Deque<Integer> dq4, int m, int n) {
		Object[] arr1 = dq1.toArray();
		Object[] arr2 = dq2.toArray();
		Object[] arr3 = dq3.toArray();
		Object[] arr4 = dq4.toArray();
		int l = 2, r=6;
		if(m+1>3) return;
		if(m==1) {
			if(n==1) {
				clockWise(dq1);
				if(!arr1[l].equals(arr2[r])) {
					reClockWise(dq2);
					forward(dq1, dq2, dq3, dq4, m+1, n);
				}					
			} else {
				reClockWise(dq1);
				if(!arr1[l].equals(arr2[r])) {
					clockWise(dq2);
					forward(dq1, dq2, dq3, dq4, m+1, n);
				}
			}
		} else if(m==2) {
			if(n==1) {
				clockWise(dq1);
				if(!arr1[l].equals(arr2[r])) {
					reClockWise(dq2);
					forward(dq1, dq2, dq3, dq4, m+1, n);
				}					
			} else {
				reClockWise(dq1);
				if(!arr1[l].equals(arr2[r])) {
					clockWise(dq2);
					forward(dq1, dq2, dq3, dq4, m+1, n);
				}
			}
			
		} else if(m==3) {
			if(n==1) {
				clockWise(dq1);
				if(!arr1[l].equals(arr2[r])) {
					reClockWise(dq2);
					forward(dq1, dq2, dq3, dq4, m+1, n);
				}					
			} else {
				reClockWise(dq1);
				if(!arr1[l].equals(arr2[r])) {
					clockWise(dq2);
					forward(dq1, dq2, dq3, dq4, m+1, n);
				}
			}
		} else if(m==4) {
			if(n==1) {
				clockWise(dq1);
				if(!arr1[l].equals(arr2[r])) {
					reClockWise(dq2);
					forward(dq1, dq2, dq3, dq4, m+1, n);
				}					
			} else {
				reClockWise(dq1);
				if(!arr1[l].equals(arr2[r])) {
					clockWise(dq2);
					forward(dq1, dq2, dq3, dq4, m+1, n);
				}
			}
		}
	}
	private static void do(Deque<Integer> dqL, Deque<Integer> dqR, int n) {
		Object[] arrL = dqL.toArray();
		Object[] arrR = dqR.toArray();
		int l = 2; int r = 6;
		if(n==1) {
			clockWise(dqL);
			if(!arrL[l].equals(arrR[r])) {
				reClockWise(dqR);
				forward(dq1, dq2, dq3, dq4, m+1, n);
			}					
		} else {
			reClockWise(dq1);
			if(!arr1[l].equals(arr2[r])) {
				clockWise(dq2);
				forward(dq1, dq2, dq3, dq4, m+1, n);
			}
		}
	}
	private static void backward(Deque<Integer> dq1, Deque<Integer> dq2, Deque<Integer> dq3, Deque<Integer> dq4, int m, int n) {
		Object[] arr1 = dq1.toArray();
		Object[] arr2 = dq2.toArray();
		Object[] arr3 = dq3.toArray();
		Object[] arr4 = dq4.toArray();
		
	}
	@SuppressWarnings("unused")
	private static void clockWise(Deque<Integer> dq) {
		dq.addFirst(dq.removeLast());
	}
	@SuppressWarnings("unused")
	private static void reClockWise(Deque<Integer> dq) {
		dq.addLast(dq.removeFirst());
	}

}
