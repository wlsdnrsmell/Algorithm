/**
 * 
 */
package swExpertAcademy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

/**
 * @author ginTonic
 * @Title 
 * 2018. 4. 11.
 */
public class No2112 {

	/**
	 * @param args
	 * @throws IOException 
	 * @throws NumberFormatException 
	 */
	static int d;
	static int w;
	static int k;
	static int ans = 100000;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.valueOf(br.readLine().trim());
		while(T-->0) {
			String[] dwk = br.readLine().split(" ");
			d = Integer.valueOf(dwk[0]);
			w = Integer.valueOf(dwk[1]);
			k = Integer.valueOf(dwk[2]);
			int[][] map = new int[d][w];
			
			int a[] = new int[w];
			
			for(int i=0; i<d; i++) {
				String[] line = br.readLine().split(" ");
				for(int j=0; j<w; j++) {
					map[i][j] = Integer.valueOf(line[j]);
				}
			}
			solve(map.clone(), 0, 0);
			solve(change(map.clone(), 0, 0), 0, 1);
			solve(change(map.clone(), 0, 1), 0, 1);
			System.out.println();
			System.out.println(ans);
		}
	}
	private static void solve(int[][] map, int row, int cnt) {
		if(row<d) {
			System.out.println(map + cnt);
			if(!check(map)) {
				solve(map.clone(), row+1, cnt);
				solve(change(map.clone(), row, 0), row+1, cnt+1);
				solve(change(map.clone(), row, 1), row+1, cnt+1);
			} else {
				System.out.println();
				System.out.println("cnt : "+cnt);
				if(ans>cnt) {
					ans = cnt;
				}
			}
		}
	}
	//약품사용
	private static int[][] change(int[][] map, int row, int type) {
		for(int i=0; i<w; i++) {
			map[row][i] = type;
		}
		return map.clone();
	}
	//성능통과유무함수
	private static boolean check(int[][]map) {
		for(int i=0; i<w; i++) {
			int cnt = 1;
			int maxCnt = 1;
			for(int j=0; j<d-1; j++) {
				int now = map[j][i];
				if(now==map[j+1][i]) {
					cnt++;
				}
				if(maxCnt<cnt) maxCnt = cnt;
				if(now!=map[j+1][i])cnt = 1;
			}
			System.out.print(maxCnt +" ");
			if(maxCnt<k) return false;
		}
		return true;
		
	}
	//연속되지않는점찾기
	private static int[] findIdx(int[][] map, int col) {
		int[] ret = new int[2];
		int type = 0;
		int idx=0;
		int cnt=1;
		int maxCnt=1;
		for(int i=0; i<d-1; i++) {
			int now = map[i][col];
			if(now==map[i+1][col]) {
				cnt+=1;
			} else {
				if(maxCnt<cnt) {
					maxCnt = cnt;
					idx=i+1;
					type = now;
				}
				cnt = 1;
			}
		}
		ret[0] = idx; ret[1] = type;
		return ret;
	}
}
