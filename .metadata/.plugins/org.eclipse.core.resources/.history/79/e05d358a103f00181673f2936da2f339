/**
 * 
 */
package etc;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/**
 * @author ginTonic
 * @Title 
 * 2018. 4. 13.
 */
public class No2602 {

	/**
	 * @param args
	 * @throws IOException 
	 */
	static int[] str;
	static int[] arrDevil;
	static int[] arrAngel;
	static int n;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String ansString = br.readLine();
		int ansN = ansString.length();
		str = new int[ansString.length()];
		for(int i=0; i<ansN; i++) {
			str[i] = ansString.charAt(i) - 'A';
		}
		
		String devil = br.readLine();
		n = devil.length();
		arrDevil = new int[n];
		for(int i=0; i<n; i++) {
			arrDevil[i] = devil.charAt(i) - 'A';
		}
		String angel = br.readLine();
		arrAngel = new int[n];
		for(int i=0; i<n; i++) {
			arrAngel[i] = angel.charAt(i) - 'A';
		}
		int[][] d= new int[n][n];
		int ans = 0;
		//d[0][0] = 1;
		if(arrDevil[n-1]==str[ansN-1]) {
			//d[0][1] = 1;
			ans += sol(d, n-1, ansN-2, 1);
		}
		if(arrAngel[n-1]==str[ansN-1]){
			//d[0][2] = 1;
			ans += sol(d, n-1, ansN-2, 2);
		}
		if(arrAngel[n-1]!=str[ansN-1] && arrDevil[n-1]!=str[ansN-1])
			ans += sol(d, n-1, ansN-1, 2);
		for(int i=0; i<n; i++)
			System.out.println("i "+i+" d[i][0] "+d[i][0]+" d[i][1] "+d[i][1]+" d[i][2] "+d[i][2]);
		System.out.println(ans);
		
	}
	//flag = 1 직전에 악마다리
	//flag = 2 직전에 천사다리
	private static int sol(int[][] d, int i, int idx, int flag) {
		System.out.println("i "+i+" idx "+idx+" flag "+flag);
		if(idx>=0 && i>0) {
			if(flag==2) {
				System.out.println("엔젤");
				if(arrDevil[i]==str[idx])
					d[i][1] = sol(d, i-1, idx-1, 1) + d[i-1][0] + 1;
				else
					d[i][0] = sol(d, i-1, idx, 1);	
			} else {
				System.out.println("데빌");
				if(arrAngel[i]==str[idx])
					d[i][2] = sol(d, i-1, idx-1, 2) + d[i-1][0] + 1;
				else
					d[i][0] = sol(d, i-1, idx, 2);
			}
		}
		return d[i][1] + d[i][2] + d[i][0];
		//if(idx==0) return d[i][1] + d[i][2] + d[i][0];
		//else return 0;
	}

}
