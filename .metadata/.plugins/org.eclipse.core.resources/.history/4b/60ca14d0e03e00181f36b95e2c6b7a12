/**
 * 
 */
package swExpertAcademy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

/**
 * @author ginTonic
 * @Title 차량정비소
 * 2018. 4. 13.
 */
public class No2477 {


	/**
	 * @param args
	 * @throws IOException 
	 * @throws NumberFormatException 
	 */
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.valueOf(br.readLine());
		String[] option = br.readLine().split(" ");
		int N = Integer.valueOf(option[0]); //접수창구
		int M = Integer.valueOf(option[1]); //정비창구
		int K = Integer.valueOf(option[2]); //고객수
		int A = Integer.valueOf(option[3]); //고객이 사용한 접수창구
		int B = Integer.valueOf(option[4]); //고객이 사용한 정비창구
		
		Reception[] a = new Reception[N+1];
		Repair[] b = new Repair[M+1];
		int[] t = new int[K+1];
		
		//접수창구 처리시간
		String[] ai = br.readLine().split(" ");
		for(int i=1; i<=N; i++) {
			Reception r = new Reception(i, Integer.valueOf(ai[i]), true);
			a[i] = r;
		}
		//정비창구 처리시간
		String[] bi = br.readLine().split(" ");
		for(int i=1; i<=M; i++) {
			Repair r = new Repair(i, Integer.valueOf(bi[i]), true);
			b[i] = r;
		}
		//고객도착시간
		String[] ti = br.readLine().split(" ");
		Sol sol = new Sol();
		PriorityQueue<Cust> q1 = new PriorityQueue<Cust>(sol);
		PriorityQueue<Cust> q2 = new PriorityQueue<Cust>(sol);
		Queue<Cust> q3 = new LinkedList<Cust>();
		
		for(int i=1; i<=K; i++) {
			Cust c = new Cust(i, Integer.valueOf(ti[i]), 0);
			q1.offer(c); 
		}
		
		//현재시간
		int nowT = 0;
		
		while(true) {
			//시작시간이 아니고, 접수, 정비처가 가동중이지 않으며 기다리는 고객이 없을때 마감
			if(q3.size()==K) {
				break;
			}
			
			//접수, 정비처가 가동중인지 확인
			for(int i=1; i<=N; i++) {
				if(a[i].t>=nowT) {
					a[i].useYN = true;
				}
			}
			for(int i=1; i<=M; i++) {
				if(b[i].t>=nowT) {
					b[i].useYN = true;
				}
			}
			Cust c = q1.peek();
			int cstT = c.getT();
			
			//접수창구 배치
			for(int i=1; i<=N; i++) {
				if(a[i].useYN) {
					q1.poll();
					a[i].useYN = false;
					c.setN(i);
					c.setT(cstT+a[i].t);
					q2.offer(c);
					break;
				}
			}
			Cust c2 = q2.peek();
			int cst2T = c2.getT();
			//정비창구 배치
			for(int i=1; i<=M; i++) {
				if(b[i].useYN) {
					q2.poll();
					c2.setM(i);
					b[i].useYN = false;
					q3.offer(c2);
				}
			}
		}
	}
}
class Sol implements Comparator<Cust> {

	/* (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	@Override
	public int compare(Cust o1, Cust o2) {
		if(o1.t < o2.t) {
			return 1;
		} else if(o1.t == o2.t) {
			if(o1.N<o2.N) {
				return 1;
			}
		}
		return -1;
	}
}
class Reception {
	int n;
	int t;
	boolean useYN;
	/**
	 * @param n
	 * @param t
	 * @param useYN
	 */
	public Reception(int n, int t, boolean useYN) {
		super();
		this.n = n;
		this.t = t;
		this.useYN = useYN;
	}
	
}
class Repair {
	int n;
	int t;
	boolean useYN;
	/**
	 * @param n
	 * @param t
	 * @param useYN
	 */
	public Repair(int n, int t, boolean useYN) {
		super();
		this.n = n;
		this.t = t;
		this.useYN = useYN;
	}
	
}
class Cust {
	int num; // 고객번호
	int N; //접수처번호
	int prcssLv; //접수처 방문 유무
	int M; //정비처번호
	int t; //입장시간
	
	/**
	 * @param num
	 * @param t
	 */
	public Cust(int num, int t, int processLv) {
		this.num = num;
		this.t = t;
		this.prcssLv = processLv;
	}

	/**
	 * @return the prcssLv
	 */
	public int getPrcssLv() {
		return prcssLv;
	}


	/**
	 * @param prcssLv the prcssLv to set
	 */
	public void setPrcssLv(int prcssLv) {
		this.prcssLv = prcssLv;
	}

	/**
	 * @return the num
	 */
	public int getNum() {
		return num;
	}
	/**
	 * @param num the num to set
	 */
	public void setNum(int num) {
		this.num = num;
	}
	/**
	 * @return the n
	 */
	public int getN() {
		return N;
	}
	/**
	 * @param n the n to set
	 */
	public void setN(int n) {
		N = n;
	}
	/**
	 * @return the m
	 */
	public int getM() {
		return M;
	}
	/**
	 * @param m the m to set
	 */
	public void setM(int m) {
		M = m;
	}
	/**
	 * @return the t
	 */
	public int getT() {
		return t;
	}
	/**
	 * @param t the t to set
	 */
	public void setT(int t) {
		this.t = t;
	}
	
}