/**
 * 
 */
package bfs;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Pair implements Comparable<Pair> {
	final int first;
	final int second;
	/**
	 * @param first
	 * @param second
	 */
	public Pair(int first, int second) {
		this.first = first;
		this.second = second;
	}
	/* (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	@Override
	public int compareTo(Pair pair) {
		if(this.first<pair.first)
			return -1;
		if(this.first>pair.first)
			return 1;
		if(this.second<pair.second)
			return -1;
		if(this.second>pair.second)
			return 1;
		return 0;
	}
	
	@Override
	public boolean equals(Object object) {
		if(object instanceof Pair) {
			Pair pair = (Pair) object;
			return this.first==pair.first&&this.second==pair.second;
		}
		return false;
	}
	
	@Override
	public int hashCode() {
		int n = 3;
		n = 19 * n +this.first;
		n = 19 * n +this.second;
		return n;
	}
}
/**
 * @author jinwook.im
 * @Titile 물통
 * 2018. 3. 12.
 */
public class No2251 {

	/**
	 * @param args
	 */
	
	public static void main(String[] args) {
		final int[] from = {0, 0, 1, 1, 2, 2};
		public static final int[] to = {1, 2, 0, 2, 0, 1};
		Scanner sc = new Scanner(System.in);
		int b[] = new int[3];
		for(int i=0;i<3;i++)
			b[i] = sc.nextInt();
		boolean[][] check = new boolean[201][201];
		boolean[] ans = new boolean[201];
		Queue<Pair> q = new LinkedList<Pair>();
		
		q.offer(new Pair(0, 0));
		check[0][0]=true;
		ans[b[2]]=true;
		int sum = b[2];
		while(!q.isEmpty()) {
			
		}
	}

}
